/*
Given a non-empty array of integers, return the k most frequent elements.

Example 1:

Input: nums = [1,1,1,2,2,3], k = 2
Output: [1,2]
Example 2:

Input: nums = [1], k = 1
Output: [1]
Note:

You may assume k is always valid, 1 ≤ k ≤ number of unique elements.
Your algorithm's time complexity must be better than O(n log n), where n is the array's size.
*/


class Solution {
public:
    vector<int> topKFrequent(vector<int>& nums, int k) {
       map<int, int> f;
        for(int i:nums){
            f[i]++;
        }
        vector< pair< int, int>>rec;
        for(auto i: f){
            rec.emplace_back(i.second, i.first);
        }
        sort(rec.begin(), rec.end(), [] (const auto &a , const auto &b ){
            return a>b;
        });
        vector<int> res;
       for(auto i: rec){
           if(k>0){
           res.push_back(i.second);
             k--;
           }
       }
return res;
    }
};
