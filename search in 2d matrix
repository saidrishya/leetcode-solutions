/*
Write an efficient algorithm that searches for a value in an m x n matrix. This matrix has the following properties:

Integers in each row are sorted from left to right.
The first integer of each row is greater than the last integer of the previous row.
Example 1:

Input:
matrix = [
  [1,   3,  5,  7],
  [10, 11, 16, 20],
  [23, 30, 34, 50]
]
target = 3
Output: true
Example 2:

Input:
matrix = [
  [1,   3,  5,  7],
  [10, 11, 16, 20],
  [23, 30, 34, 50]
]
target = 13
Output: false
*/

class Solution {
public:
    bool searchMatrix(vector<vector<int>>& matrix, int target) {
        if(matrix.size()==0) return false;
        int j=0 , row = matrix.size(), col = matrix[0].size() ;
        while(j<row && j<col){
            if(matrix[j][j] == target) return true;
            for(int i=j; i<row; i++){
                if(matrix[i][j] == target) return true;
                if(matrix[i][j] > target) break;
            }
            
            for(int i=j; i<col; i++){
                if(matrix[j][i] == target) return true;
                if(matrix[j][i] > target) break;
            }
            j++;
        }
return false;
    }
};
