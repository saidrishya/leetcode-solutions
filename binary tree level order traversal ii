/*
Given a binary tree, return the bottom-up level order traversal of its nodes' values. (ie, from left to right, level by level from leaf to
root).

For example:
Given binary tree [3,9,20,null,null,15,7],
    3
   / \
  9  20
    /  \
   15   7
return its bottom-up level order traversal as:
[
  [15,7],
  [9,20],
  [3]
]
*/

class Solution {
public:
    vector<vector<int>> levelOrderBottom(TreeNode* root) {
         vector<vector<int>> res;
         if(root==NULL) {
             return res;
         }
        
        queue<TreeNode*> q;
        q.push(root);
    
    
        while(!q.empty()){
            int size = q.size();
            vector<int> temp;
            while(size-- > 0){
            TreeNode* t= q.front();
                q.pop();
                temp.push_back(t->val);
                if(t->left) q.push(t->left);
                if(t->right) q.push(t->right);
            }
           res.push_back(temp);
        }
     reverse(res.begin(), res.end());
return res;
    }
};
