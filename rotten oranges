/*
In a given grid, each cell can have one of three values:

the value 0 representing an empty cell;
the value 1 representing a fresh orange;
the value 2 representing a rotten orange.
Every minute, any fresh orange that is adjacent (4-directionally) to a rotten orange becomes rotten.

Return the minimum number of minutes that must elapse until no cell has a fresh orange.  If this is impossible, return -1 instead.

 

Example 1:



Input: [[2,1,1],[1,1,0],[0,1,1]]
Output: 4
Example 2:

Input: [[2,1,1],[0,1,1],[1,0,1]]
Output: -1
Explanation:  The orange in the bottom left corner (row 2, column 0) is never rotten, because rotting only happens 4-directionally.
Example 3:

Input: [[0,2]]
Output: 0
Explanation:  Since there are already no fresh oranges at minute 0, the answer is just 0.
 

Note:

1 <= grid.length <= 10
1 <= grid[0].length <= 10
grid[i][j] is only 0, 1, or 2.
*/

class Solution {
public:
    bool find(vector<vector<int>>& grid)
    {
        for(int i=0; i<grid.size(); i++)
        {
            for(int j=0; j<grid[i].size(); j++)
            {
                if(grid[i][j] == 1)
                    return true;
            }
        }
        return false;
    }
	
    void orangesRotting(vector<vector<int>>& grid, int i, int j, vector<vector<int>>& temp,bool& changed)
    {
        if(i+1<grid.size() && temp[i+1][j] == 2)
        {
            grid[i][j] = 2;
            changed = true;
            return;
        }
        
        if(i-1>=0 && temp[i-1][j] == 2)
        {
            grid[i][j] = 2;
            changed = true;
            return;
        }
        
        if(j+1<grid[i].size() && temp[i][j+1] == 2)
        {
            grid[i][j] = 2;
            changed = true;
            return;
        }
        
        if(j-1>=0 && temp[i][j-1] == 2)
        {
            grid[i][j] = 2;
            changed = true;
            return;
        }
        
    }
    int orangesRotting(vector<vector<int>>& grid) {
        int time = 0;
        while(true)
        {
            vector<vector<int>> temp = grid;
            bool changed = false;
            for(int i=0; i<grid.size(); i++)
            {
                for(int j=0; j<grid[i].size(); j++)
                {
                    if(grid[i][j] == 1)
                        orangesRotting(grid,i,j,temp,changed);
                }
            }
            if(changed)
            {
                time++;
                continue;
            }
            else if(!find(grid))
                return time;
            else
                return -1;
        }
        return -1;
    }
};
