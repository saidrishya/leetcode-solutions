/*
Suppose Andy and Doris want to choose a restaurant for dinner, and they both have a list of favorite restaurants represented by strings.

You need to help them find out their common interest with the least list index sum. If there is a choice tie between answers, output all 
of them with no order requirement. You could assume there always exists an answer.

Example 1:
Input:
["Shogun", "Tapioca Express", "Burger King", "KFC"]
["Piatti", "The Grill at Torrey Pines", "Hungry Hunter Steakhouse", "Shogun"]
Output: ["Shogun"]
Explanation: The only restaurant they both like is "Shogun".
Example 2:
Input:
["Shogun", "Tapioca Express", "Burger King", "KFC"]
["KFC", "Shogun", "Burger King"]
Output: ["Shogun"]
Explanation: The restaurant they both like and have the least index sum is "Shogun" with index sum 1 (0+1).
*/

class Solution {
public:
    vector<string> findRestaurant(vector<string>& list1, vector<string>& list2) {
         unordered_map<string, int> m;
         for(int i=0; i<list1.size(); i++){
             m[list1[i]] = i;
         }
        int min=INT_MAX;
        string ans;
        vector<string> res;
        
        for(int i=0; i<list2.size(); i++){
             unordered_map<string, int>::iterator it= m.find(list2[i]);
            if(it!= m.end()){
                if((it->second + i) < min ) res.clear();
                if((it->second + i) <= min ){
                    min=it->second+i;
                    res.push_back(it->first);
                }
            }
        }
        
        //res.push_back(ans);
    return res;
        
    }
};
