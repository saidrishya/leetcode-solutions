/*
Given a binary tree and a sum, find all root-to-leaf paths where each path's sum equals the given sum.

Note: A leaf is a node with no children.

Example:

Given the below binary tree and sum = 22,

      5
     / \
    4   8
   /   / \
  11  13  4
 /  \    / \
7    2  5   1
Return:

[
   [5,4,11,2],
   [5,8,4,5]
]
*/

class Solution {
    public List<List<Integer>> pathSum(TreeNode root, int sum) {
        List<List<Integer>> res = new ArrayList<>();
        findPath(root, sum, new ArrayList<Integer>(), res);
    return res;
    }
    public void findPath(TreeNode root, int sum, List<Integer> curr,  List<List<Integer>> res){
        if(root == null){
            return;
        }
        curr.add(root.val);
        if(root.val == sum && root.left==null && root.right==null){
            res.add(curr);
            return;
        }
        
         findPath(root.left, sum - root.val, new ArrayList<Integer>(curr), res);
         findPath(root.right, sum - root.val, new ArrayList<Integer>(curr), res);
        
    }
}
