/*
Given a string containing digits from 2-9 inclusive, return all possible letter combinations that the number could represent.

A mapping of digit to letters (just like on the telephone buttons) is given below. Note that 1 does not map to any letters.



Example:

Input: "23"
Output: ["ad", "ae", "af", "bd", "be", "bf", "cd", "ce", "cf"].
*/

class Solution {
    public List<String> letterCombinations(String digits) {
        List<String> res = new ArrayList<String>() ;
            if(digits==null || digits.length()==0 )
                return res;
      String map[]={
          "0",
          "1",
          "abc",
          "def",
          "ghi",
          "jkl",
          "mno",
          "pqrs",
          "tuv",
          "wxyz"
              };
        utility(res, map, digits, "" , 0);
    return res;
    }


public void utility(List<String> res, String[] map, String digits, String curr,int index)
{
    if(index == digits.length())
    {
        res.add(curr);
        return;
    }
    
    String letters = map[digits.charAt(index) - '0'];
    for(int i=0;i<letters.length(); i++)
    {
        utility(res,map,digits,curr+letters.charAt(i) , index+1);
    }
}
}
