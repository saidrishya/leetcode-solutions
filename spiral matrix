/*
Given a matrix of m x n elements (m rows, n columns), return all elements of the matrix in spiral order.

Example 1:

Input:
[
 [ 1, 2, 3 ],
 [ 4, 5, 6 ],
 [ 7, 8, 9 ]
]
Output: [1,2,3,6,9,8,7,4,5]
Example 2:

Input:
[
  [1, 2, 3, 4],
  [5, 6, 7, 8],
  [9,10,11,12]
]
Output: [1,2,3,4,8,12,11,10,9,5,6,7]
*/

class Solution {
public:
    vector<int> spiralOrder(vector<vector<int>>& matrix) {
        int row=matrix.size();
        vector<int> res;
        if(row==0) return res;
        int l=0,k=0,col=matrix[0].size();
        while(l<row && k<col){
            
            for(int i=k; i<col; i++){
                res.push_back(matrix[k][i]);
            }
            l++;
            
            for(int i=l; i<row; i++){
                res.push_back(matrix[i][col-1]);
            }
            col--;
            
            if(l<row){
                for(int i=col-1; i>=k; i--){
                    res.push_back(matrix[row-1][i]);
                }
                row--;
            }
            
            if(k<col){
                for(int i=row-1; i>=l; i--){
                    res.push_back(matrix[i][k]);
                }
                k++;
            }
        }
    return res;
        
    }
};
