/*
Given an array nums sorted in ascending order, return true if and only if you can split it into 1 or more subsequences such that each 
subsequence consists of consecutive integers and has length at least 3.

 

Example 1:

Input: [1,2,3,3,4,5]
Output: True
Explanation:
You can split them into two consecutive subsequences : 
1, 2, 3
3, 4, 5

Example 2:

Input: [1,2,3,3,4,4,5,5]
Output: True
Explanation:
You can split them into two consecutive subsequences : 
1, 2, 3, 4, 5
3, 4, 5

Example 3:

Input: [1,2,3,4,4,5]
Output: False
 

Constraints:

1 <= nums.length <= 10000
*/

class Solution {
public:
    bool isPossible(vector<int>& nums) {
       int n=nums.size();
        if(n==0) return false;
       int start=nums[0], end=nums[n-1];
        vector<int> count(end - start + 1 , 0);
        for(auto i: nums) count[i-start]++;
        int i=0;
        while(i<count.size()){
            if(count[i] == 0){
                i++;
                continue;
            }
            count[i]--;
            int j=i+1;
            while(j < count.size()){
                if(count[j] > count[j-1]){
                    count[j]--;
                    j++;
                }
                else break;
            }
            if(j-i <= 2) return false;
        }
return true;        
    }
};
