/*
Let's define a function f(s) over a non-empty string s, which calculates the frequency of the smallest character in s. For example, if 
s = "dcce" then f(s) = 2 because the smallest character is "c" and its frequency is 2.

Now, given string arrays queries and words, return an integer array answer, where each answer[i] is the number of words such that
f(queries[i]) < f(W), where W is a word in words.

 

Example 1:

Input: queries = ["cbd"], words = ["zaaaz"]
Output: [1]
Explanation: On the first query we have f("cbd") = 1, f("zaaaz") = 3 so f("cbd") < f("zaaaz").
Example 2:

Input: queries = ["bbb","cc"], words = ["a","aa","aaa","aaaa"]
Output: [1,2]
Explanation: On the first query only f("bbb") < f("aaaa"). On the second query both f("aaa") and f("aaaa") are both > f("cc").
 

Constraints:

1 <= queries.length <= 2000
1 <= words.length <= 2000
1 <= queries[i].length, words[i].length <= 10
queries[i][j], words[i][j] are English lowercase letters.
*/

class Solution {
public:
    vector<int> numSmallerByFrequency(vector<string>& queries, vector<string>& words) {
        vector<int> v1,v2;
        
        for(int i=0; i<queries.size(); i++){
            map<char, int> m;
            for(int j=0; j<queries[i].size();j++){
                m[queries[i][j]]++;
            }
             v1.push_back(m.begin()->second);
        }
        
        for(int i=0; i<words.size(); i++){
            map<char, int> m;
            for(int j=0; j<words[i].size();j++){
                m[words[i][j]]++;
            }
             v2.push_back(m.begin()->second);
        }
        
        vector<int> res;
        for(int i=0; i<v1.size(); i++){
            int c=0;
            for(int j=0; j<v2.size(); j++){
                if(v1[i] < v2[j]) c++;
            }
            res.push_back(c);
        }
return res;
    }
};
