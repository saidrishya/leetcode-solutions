/*
Given a string, sort it in decreasing order based on the frequency of characters.

Example 1:

Input:
"tree"

Output:
"eert"

Explanation:
'e' appears twice while 'r' and 't' both appear once.
So 'e' must appear before both 'r' and 't'. Therefore "eetr" is also a valid answer.
Example 2:

Input:
"cccaaa"

Output:
"cccaaa"

Explanation:
Both 'c' and 'a' appear three times, so "aaaccc" is also a valid answer.
Note that "cacaca" is incorrect, as the same characters must be together.
Example 3:

Input:
"Aabb"

Output:
"bbAa"

Explanation:
"bbaA" is also a valid answer, but "Aabb" is incorrect.
Note that 'A' and 'a' are treated as two different characters.
*/

class Solution {
public:
    string frequencySort(string s) {
       map<char,int> m;
        for(auto ch : s){
            m[ch]++;
        }
        vector<pair<int,char>> rec;
        for(auto& x:m){
            rec.emplace_back(x.second,x.first);
        }
        sort(rec.begin(),rec.end(),[](const auto& a, const auto& b){
            return a>b;
        });
        string res;
        for(auto& x:rec){
            while(x.first){
                res += x.second;
                x.first--;
            }
        }
        return res;
        
    }
};
