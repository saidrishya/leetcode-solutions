/*
Design your implementation of the circular queue. The circular queue is a linear data structure in which the operations are performed 
based on FIFO (First In First Out) principle and the last position is connected back to the first position to make a circle. It is also 
called "Ring Buffer".

One of the benefits of the circular queue is that we can make use of the spaces in front of the queue. In a normal queue, once the queue 
becomes full, we cannot insert the next element even if there is a space in front of the queue. But using the circular queue, we can use 
the space to store new values.

Your implementation should support following operations:

MyCircularQueue(k): Constructor, set the size of the queue to be k.
Front: Get the front item from the queue. If the queue is empty, return -1.
Rear: Get the last item from the queue. If the queue is empty, return -1.
enQueue(value): Insert an element into the circular queue. Return true if the operation is successful.
deQueue(): Delete an element from the circular queue. Return true if the operation is successful.
isEmpty(): Checks whether the circular queue is empty or not.
isFull(): Checks whether the circular queue is full or not.
*/

class MyCircularQueue {
public:
    /** Initialize your data structure here. Set the size of the queue to be k. */
    vector<int> arr;
    int size,front,rear;
    
    MyCircularQueue(int k) {
    arr.resize(k + 1);
	front = 0;
	rear = 0;
    size=k;
    }
    
    /** Insert an element into the circular queue. Return true if the operation is successful. */
    bool enQueue(int value) {
       if(isFull()) return false;
        rear = (rear + 1) % (size + 1);
	arr[rear] = value;

	return true;
    }
    
    /** Delete an element from the circular queue. Return true if the operation is successful. */
    bool deQueue() {
        if (isEmpty())
		return false;

	front = (front + 1) % (size + 1);

	return true;
    }
    
    /** Get the front item from the queue. */
    int Front() {
         if(isEmpty()) return -1;
        return  arr[(front + 1) % (size + 1)];
    }
    
    /** Get the last item from the queue. */
    int Rear() {
        if(isEmpty()) return -1;
        return arr[rear];
    }
    
    /** Checks whether the circular queue is empty or not. */
    bool isEmpty() {
        return front == rear;
    }
    
    /** Checks whether the circular queue is full or not. */
    bool isFull() {
        return (rear+1)%(size+1) == front;
    }
};

/**
 * Your MyCircularQueue object will be instantiated and called as such:
 * MyCircularQueue* obj = new MyCircularQueue(k);
 * bool param_1 = obj->enQueue(value);
 * bool param_2 = obj->deQueue();
 * int param_3 = obj->Front();
 * int param_4 = obj->Rear();
 * bool param_5 = obj->isEmpty();
 * bool param_6 = obj->isFull();
 */
