/*
Given a linked list, return the node where the cycle begins. If there is no cycle, return null.

To represent a cycle in the given linked list, we use an integer pos which represents the position (0-indexed) in the linked list where tail 
connects to. If pos is -1, then there is no cycle in the linked list.

Note: Do not modify the linked list.

 

Example 1:

Input: head = [3,2,0,-4], pos = 1
Output: tail connects to node index 1
Explanation: There is a cycle in the linked list, where tail connects to the second node.
*/

class Solution {
public:
    ListNode *detectCycle(ListNode *head) {
        ListNode *s, *f;        s=head;          f=head;
       // res=NULL;
        while( f && f->next){
            s=s->next;
            f=f->next->next;
            if(s==f){
                break;
            }
        }
        if(f==NULL || f->next==NULL) return NULL;
        s=head;
        while(s!=f){
            s=s->next;
            f=f->next;
        }
return s;
        
    }
};
