/*
You are given two non-empty linked lists representing two non-negative integers. The most significant digit comes first and each of their 
nodes contain a single digit. Add the two numbers and return it as a linked list.

You may assume the two numbers do not contain any leading zero, except the number 0 itself.

Follow up:
What if you cannot modify the input lists? In other words, reversing the lists is not allowed.

Example:

Input: (7 -> 2 -> 4 -> 3) + (5 -> 6 -> 4)
Output: 7 -> 8 -> 0 -> 7
*/


class Solution {
public:
    ListNode* addTwoNumbers(ListNode* l1, ListNode* l2) {
        stack<ListNode*> s1,s2;
        while(l1){
            s1.push(l1);
            l1=l1->next;
        }
         while(l2){
            s2.push(l2);
            l2=l2->next;
        }
        ListNode *ans=NULL;
        int carry=0;
        while(!s1.empty() || !s2.empty()){
            int val = carry;
            if(!s1.empty()){
                val+= s1.top()->val;
                s1.pop();
            }
             if(!s2.empty()){
                val+= s2.top()->val;
                s2.pop();
            }
            carry = val/10;
            ListNode *n =  new ListNode(val%10);
            n->next=ans;
            ans=n;
        }
        if(carry){
            ListNode *n =  new ListNode(carry);
            n->next=ans;
            ans=n;
        }
    return ans;
    }
};
