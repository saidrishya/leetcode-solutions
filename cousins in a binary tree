/*
In a binary tree, the root node is at depth 0, and children of each depth k node are at depth k+1.

Two nodes of a binary tree are cousins if they have the same depth, but have different parents.

We are given the root of a binary tree with unique values, and the values x and y of two different nodes in the tree.

Return true if and only if the nodes corresponding to the values x and y are cousins.

 

Example 1:


Input: root = [1,2,3,4], x = 4, y = 3
Output: false
Example 2:


Input: root = [1,2,3,null,4,null,5], x = 5, y = 4
Output: true
Example 3:



Input: root = [1,2,3,null,4], x = 2, y = 3
Output: false
*/


class Solution {
public:
    bool isCousins(TreeNode* root, int x, int y) {
        int countX = 0, countY = 0;
        queue<TreeNode*>q;
        TreeNode* parentX;
        TreeNode* parentY;
        q.push(root);
        while (!q.empty()) {
            for (int i = q.size(); i > 0; --i) {
                TreeNode* node = q.front();
                q.pop();
                if (node->left) {
                    if (node->left->val == x) parentX = node;
                    if (node->left->val == y) parentY = node;
                    q.push(node->left);
                }
                if (node->right) {
                    if (node->right->val == x) parentX = node;
                    if (node->right->val == y) parentY = node;
                    q.push(node->right);
                }
            }
            ++countX; ++countY;
            if (parentX != NULL || parentY != NULL) break;
        }
        return countX == countY && parentY != NULL && parentX != NULL && parentY != parentX;
    }
};
