/*
Given a binary search tree and the lowest and highest boundaries as L and R, trim the tree so that all its elements lies in [L, R] (R >= L)
You might need to change the root of the tree, so the result should return the new root of the trimmed binary search tree.

Example 1:
Input: 
    1
   / \
  0   2

  L = 1
  R = 2

Output: 
    1
      \
       2
Example 2:
Input: 
    3
   / \
  0   4
   \
    2
   /
  1

  L = 1
  R = 3

Output: 
      3
     / 
   2   
  /
 1
 */
 
 class Solution {
public:
    TreeNode* trimBST(TreeNode* root, int L, int R) {
        if(!root) return root;
        if(root->left) root->left = trimBST(root->left,L,R);
        if(root->right) root->right = trimBST(root->right,L,R);
        
        
        if(root->val < L || root->val > R){
            if(root->left) root=root->left;
            else if(root->right) root=root->right;
            else if(!root->left && !root->right) root=NULL;
        }
return root;
    }
};
