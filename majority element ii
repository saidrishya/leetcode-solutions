/*
Given an integer array of size n, find all elements that appear more than ⌊ n/3 ⌋ times.

Note: The algorithm should run in linear time and in O(1) space.

Example 1:

Input: [3,2,3]
Output: [3]
Example 2:

Input: [1,1,1,3,3,2,2,2]
Output: [1,2]
*/

class Solution {
public:
    vector<int> majorityElement(vector<int>& nums) {
        vector<int> res;
        if(nums.size()==0) return res;
        if(nums.size()==1) return nums;
        float z=(float)nums.size()/3;
        int k=floor(z);
        map<int,int> m;
        for(int i=0; i<nums.size(); i++) m[nums[i]]++;
        for(int i=0 ;i<nums.size(); i++){
            if(find(res.begin(), res.end() , nums[i]) == res.end()){
                 if(m[nums[i]] > k){
                    res.push_back(nums[i]);
                }
                
            }
          
        }
return res;
        
    }
};
